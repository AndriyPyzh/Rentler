apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  labels:
    app: apartment-service
  name: apartment-service
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: apartment-service
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: apartment-service
    spec:
      containers:
        - image: gcr.io/rentler-370619/rentler_apartment-service
          imagePullPolicy: Always
          name: apartment-service
          envFrom:
            - configMapRef:
                name: apartment-service
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: apartment-service
  name: apartment-service
  namespace: default
spec:
  ports:
    - port: 8200
      protocol: TCP
      targetPort: 8200
  selector:
    app: apartment-service
  type: ClusterIP
---
apiVersion: v1
data:
  spring.application.name: 'apartment-service'
  server.port: '8200'
  server.servlet.context-path: '/apartments'

  spring.datasource.url: 'jdbc:postgresql://postgres:5432/apartment_service'
  spring.datasource.username: 'apartment_service_user'
  spring.datasource.password: 'apartment_service_password'

  spring.jpa.database-platform: 'org.hibernate.dialect.PostgreSQL95Dialect'
  spring.jpa.show-sql: 'true'
  spring.jpa.hibernate.ddl-auto: 'create-drop'

  spring.sleuth.sampler.probability: '1.0'

  security.oauth2.client.client-id: 'apartment-service'
  security.oauth2.client.client-secret: 'password'
  security.oauth2.client.grant-type: 'client_credentials'
  security.oauth2.client.scope: 'server'
  security.oauth2.client.accessTokenUri: 'http://auth-service:5000/auth/oauth/token'
  security.oauth2.resource.token-info-uri: 'http://auth-service:5000/auth/oauth/check_token'

  feign.client.config.default.connectTimeout: '160000000'
  feign.client.config.default.readTimeout: '160000000'

  # disable registry and config
  spring.cloud.config.enabled: 'false'
  spring.cloud.service-registry.auto-registration.enabled: 'false'
  eureka.client.enabled: 'false'
  eureka.client.serviceUrl.registerWithEureka: 'false'
  spring.zipkin.enabled: 'false'

  spring.rabbitmq.host: "${RABBITMQ_SERVICE_HOST}"

  ACCOUNT_SERVICE_URL: 'http://account-service:8100'

kind: ConfigMap
metadata:
  name: apartment-service
  namespace: default