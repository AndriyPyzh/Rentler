pipeline{
    agent {
	    kubernetes {
            cloud 'kubernetes'
            label 'maven'
            yaml '''
            apiVersion: v1
            kind: Pod
            spec:
              containers:
                - name: maven
                  image: maven:3.8.1-openjdk-15
                  command:
                    - cat
                  tty: true
            '''
	    }
	}

    stages{
        stage('checkout git') {
            steps {
                 git branch: 'develop', url:'https://github.com/AndriyPyzh/Rentler.git'
            }
        }
        stage("Build") {
    		steps {
        		container('maven') {
                    sh "mvn clean package -DskipTests -Pdev -f rentler-helper/pom.xml"
                }
    		}
        }
        stage("Test") {
    		steps {
        		container('maven') {
                    sh "mvn verify -f -Pdev rentler-helper/pom.xml"
                }
    		}
        }
        stage("Deploy") {
    		steps {
        		container('maven') {
                    sh "mvn deploy -DskipTests -Pdev -f rentler-helper/pom.xml"
                }
    		}
        }
    }
}




```````````````````````````````````
pipeline{
    agent any
    environment {
        PROJECT_ID = 'rentler-385708'
        CLUSTER_NAME = 'rentler-cluster'
        LOCATION = 'us-central1'
        CREDENTIALS_ID = 'Rentler'
    }

    stages{
        stage('checkout git'){
            steps{
                 git branch: 'develop',
               url:'https://github.com/AndriyPyzh/Rentler.git'
            }

        }
        stage("Build and test") {
        	    agent {
            	    	kubernetes {
                            cloud 'kubernetes'
                            label 'maven-pod'
                            yamlFile 'gke/jenkins/maven-pod.yaml'
        		        }
        	    }
        	    steps {
        	    	container('maven') {
                            dir("gke") {
        		        // build
        	    	        sh "mvn clean package"

        		        // run tests
        		        sh "mvn verify"

        			// bundle the generated artifact
        		        sh "cp target/${APP_NAME}-*.jar $APP_JAR"

        		        // archive the build context for kaniko
        			sh "tar --exclude='./.git' -zcvf /tmp/$BUILD_CONTEXT ."
        		        sh "mv /tmp/$BUILD_CONTEXT ."
        		        step([$class: 'ClassicUploadStep', credentialsId: env.JENK_INT_IT_CRED_ID, bucket: "gs://${BUILD_CONTEXT_BUCKET}", pattern: env.BUILD_CONTEXT])
                    }
        		}
            }
        }

        stage('Build App'){
            steps{
                sh './mvnw clean package'
            }
        post{
            success{
                junit 'target/surefire-reports/*.xml'
                archiveArtifacts "target/*.jar"
            }
        }
        }
       stage('Docker build'){
        steps{
            script{
                sh 'docker build -t shivampateriyaknoldus/petclinic:0.1 . '
            }
        }
       }
       stage('Docker login and push'){
        steps{
            withCredentials([string(credentialsId: 'dockersecret', variable: 'TOKEN')]) {
            sh 'docker login -u shivampateriyaknoldus -p $TOKEN'

            sh 'docker push shivampateriyaknoldus/petclinic:0.1'
        }

       }
       }


       stage('Deploy to kubernetes'){
        steps{

            step([$class: 'KubernetesEngineBuilder', projectId: env.PROJECT_ID, clusterName: env.CLUSTER_NAME, location: env.LOCATION, manifestPattern: 'petclinic.yaml', credentialsId: env.CREDENTIALS_ID, verifyDeployments: true])
		   echo "Deployment Finished ..."
        }
       }

    }
}
