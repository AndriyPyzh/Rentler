version: '3.8'

services:
  config-server:
    container_name: config-server
    build:
      context: .
      dockerfile: ./config-server/Dockerfile
    ports:
      - 8888:8888
    networks:
      - net
    healthcheck:
      test: [ "CMD", "curl", "-I", "http://config-server:8888" ]
    environment:
      eureka.client.serviceUrl.defaultZone: http://registry-server:8761/eureka
      spring.security.user.name: "${CONFIG_SERVICE_USER}"
      spring.security.user.password: "${CONFIG_SERVICE_PASSWORD}"
    volumes:
      - ./config-server/target/config-server.jar:/app/config-server.jar
    deploy:
      resources:
        limits:
          memory: 300M


  registry-server:
    container_name: registry-server
    build:
      context: .
      dockerfile: ./registry-server/Dockerfile
    ports:
      - 8761:8761
    networks:
      - net
    depends_on:
      config-server:
        condition: service_healthy
    environment:
      spring.cloud.config.uri: http://config-server:8888
      spring.cloud.config.username: "${CONFIG_SERVICE_USER}"
      spring.cloud.config.password: "${CONFIG_SERVICE_PASSWORD}"
    volumes:
      - ./registry-server/target/registry-server.jar:/app/registry-server.jar
    deploy:
      resources:
        limits:
          memory: 300M

  api-gateway:
    container_name: api-gateway
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    ports:
      - 8765:8765
    networks:
      - net
    depends_on:
      config-server:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      spring.cloud.config.uri: http://config-server:8888
      spring.cloud.config.username: "${CONFIG_SERVICE_USER}"
      spring.cloud.config.password: "${CONFIG_SERVICE_PASSWORD}"
      eureka.client.serviceUrl.defaultZone: http://registry-server:8761/eureka
      spring.zipkin.base-url: http://zipkin-server:9411
      spring.rabbitmq.host: rabbitmq
      spring.zipkin.sender.type: rabbit
    volumes:
      - ./api-gateway/target/api-gateway.jar:/app/api-gateway.jar
    deploy:
      resources:
        limits:
          memory: 300M

  auth-service:
    container_name: auth-service
    build:
      context: .
      dockerfile: ./auth-service/Dockerfile
    ports:
      - 5000:5000
    networks:
      - net
    depends_on:
      config-server:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      spring.cloud.config.uri: http://config-server:8888
      spring.cloud.config.username: "${CONFIG_SERVICE_USER}"
      spring.cloud.config.password: "${CONFIG_SERVICE_PASSWORD}"
      eureka.client.serviceUrl.defaultZone: http://registry-server:8761/eureka
      spring.zipkin.base-url: http://zipkin-server:9411
      spring.rabbitmq.host: rabbitmq
      spring.zipkin.sender.type: rabbit
    volumes:
      - ./auth-service/target/auth-service.jar:/app/auth-service.jar
    deploy:
      resources:
        limits:
          memory: 300M

  account-service:
    container_name: account-service
    build:
      context: .
      dockerfile: ./account-service/Dockerfile
    ports:
      - 8100:8100
    networks:
      - net
    depends_on:
      config-server:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      spring.cloud.config.uri: http://config-server:8888
      spring.cloud.config.username: "${CONFIG_SERVICE_USER}"
      spring.cloud.config.password: "${CONFIG_SERVICE_PASSWORD}"
      eureka.client.serviceUrl.defaultZone: http://registry-server:8761/eureka
      spring.zipkin.base-url: http://zipkin-server:9411
      spring.rabbitmq.host: rabbitmq
      spring.zipkin.sender.type: rabbit
    volumes:
      - ./account-service/target/account-service.jar:/app/account-service.jar
    deploy:
      resources:
        limits:
          memory: 500M

  apartment-service:
    container_name: apartment-service
    build:
      context: .
      dockerfile: ./apartment-service/Dockerfile
    ports:
      - 8200:8200
    networks:
      - net
    depends_on:
      config-server:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      spring.cloud.config.uri: http://config-server:8888
      spring.cloud.config.username: "${CONFIG_SERVICE_USER}"
      spring.cloud.config.password: "${CONFIG_SERVICE_PASSWORD}"
      eureka.client.serviceUrl.defaultZone: http://registry-server:8761/eureka
      spring.zipkin.base-url: http://zipkin-server:9411
      spring.rabbitmq.host: rabbitmq
      spring.zipkin.sender.type: rabbit
    volumes:
      - ./apartment-service/target/apartment-service.jar:/app/apartment-service.jar
    deploy:
      resources:
        limits:
          memory: 500M

  postgres:
    image: postgres:alpine
    build:
      context: .
      dockerfile: ./postgres/Dockerfile
    ports:
      - 5432:5432
    networks:
      - net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
    environment:
      POSTGRES_USER: "${DATASOURCE_USER}"
      POSTGRES_PASSWORD: "${DATASOURCE_PASSWORD}"
    volumes:
      - /var/lib/postgresql/data
    deploy:
      resources:
        limits:
          memory: 300M

  zipkin-server:
    image: openzipkin/zipkin
    ports:
      - 9411:9411
    networks:
      - net
    environment:
      - RABBIT_ADDRESSES=rabbitmq
      - STORAGE_TYPE=mem
    depends_on:
      rabbitmq:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 300M

  rabbitmq:
    image: rabbitmq:latest
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - net
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
    deploy:
      resources:
        limits:
          memory: 300M

  web-client:
    container_name: web-client
    build:
      context: .
      dockerfile: web-client/Dockerfile
    ports:
      - 3000:3000
    networks:
      - net
    deploy:
      resources:
        limits:
          memory: 500M

networks:
  net: