version: '3.8'

services:
  config-server:
    container_name: config-server
    build:
      context: .
      dockerfile: ./config-server/Dockerfile
    ports:
      - 8888:8888
    networks:
      - net
    environment:
      eureka.client.serviceUrl.defaultZone: http://registry-server:8761/eureka
    volumes:
      - ./config-server/target/config-server.jar:/app/config-server.jar

  registry-server:
    container_name: registry-server
    build:
      context: .
      dockerfile: ./registry-server/Dockerfile
    ports:
      - 8761:8761
    networks:
      - net
    depends_on:
      - config-server
    environment:
      spring.cloud.config.uri: http://config-server:8888
    volumes:
      - ./registry-server/target/registry-server.jar:/app/registry-server.jar

  api-gateway:
    container_name: api-gateway
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    ports:
      - 8765:8765
    networks:
      - net
    depends_on:
      - config-server
    environment:
      spring.cloud.config.uri: http://config-server:8888
      eureka.client.serviceUrl.defaultZone: http://registry-server:8761/eureka
    volumes:
      - ./api-gateway/target/api-gateway.jar:/app/api-gateway.jar


  user-service:
    container_name: user-service
    build:
      context: .
      dockerfile: ./user-service/Dockerfile
    ports:
      - 8100:8100
    networks:
      - net
    depends_on:
      - config-server
    environment:
      spring.cloud.config.uri: http://config-server:8888
      eureka.client.serviceUrl.defaultZone: http://registry-server:8761/eureka
    volumes:
      - ./user-service/target/user-service.jar:/app/user-service.jar

  apartment-service:
    container_name: apartment-service
    build:
      context: .
      dockerfile: ./apartment-service/Dockerfile
    ports:
      - 8200:8200
    networks:
      - net
    depends_on:
      - config-server
    environment:
      spring.cloud.config.uri: http://config-server:8888
      eureka.client.serviceUrl.defaultZone: http://registry-server:8761/eureka
    volumes:
      - ./apartment-service/target/apartment-service.jar:/app/apartment-service.jar


  postgres:
    image: postgres:alpine
    build:
      context: .
      dockerfile: ./postgres/Dockerfile
    ports:
      - 5432:5432
    networks:
      - net
    environment:
      POSTGRES_USER: "${DATASOURCE_USER}"
      POSTGRES_PASSWORD: "${DATASOURCE_PASSWORD}"
    volumes:
    - /var/lib/postgresql/data


networks:
  net: